# streamlit_app.py

import streamlit as st
import requests
import pandas as pd
import folium
from folium.plugins import HeatMap
from streamlit_folium import st_folium
from io import BytesIO
from PIL import Image
import base64

API_URL = "http://localhost:8000"

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", layout="wide")
st.title("üåç –ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–∞ –µ–∫–æ–ª–æ–≥—ñ—é –º—ñ—Å—Ç–∞")

city = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:", value="Kyiv")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
if st.button("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º—ñ—Å—Ç–æ"):
    res = requests.get(f"{API_URL}/cities/{city}/initialize")
    st.write(res.json())

if st.button("üì• –ó—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ"):
    res = requests.get(f"{API_URL}/cities/{city}/collect_data")
    st.write(res.json())

if "points" not in st.session_state:
    st.session_state.points = []
if "route_data" not in st.session_state:
    st.session_state.route_data = None

# --- üîΩ –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞–ø–∏ ---
mode = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∫–∞—Ä—Ç–∏:", [
    "üåç –ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è",
    "üó∫Ô∏è –ì—Ä–∞—Ñ –¥–æ—Ä—ñ–≥",
    "üìç –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É",
    "üß© –ö–ª–∞—Å—Ç–µ—Ä–∏"
])

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó –¥–ª—è —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É ---
if 'points' not in st.session_state:
    st.session_state.points = []
if 'route_data' not in st.session_state:
    st.session_state.route_data = None

# --- –ë–∞–∑–æ–≤–∞ –º–∞–ø–∞ ---
m = folium.Map(location=[50.45, 30.52], zoom_start=12)
folium.LatLngPopup().add_to(m)

# --- –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ –¥–ª—è –æ–≤–µ—Ä–ª–µ—ó–≤ ---
show_pollution = st.checkbox("–ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è", value=True)
show_heatmap = st.checkbox("–¢–µ–ø–ª–æ–≤–∞ –º–∞–ø–∞", value=True)
show_routes = st.checkbox("–ú–∞—Ä—à—Ä—É—Ç–∏", value=False)
show_clusters = st.checkbox("–ö–ª–∞—Å—Ç–µ—Ä–∏", value=False)

# --- –ë–∞–∑–æ–≤–∞ –∫–∞—Ä—Ç–∞ ---
m = folium.Map(location=[50.45, 30.52], zoom_start=12)

output = st_folium(m, width=700, height=500)

# --- –†—ñ–≤–µ–Ω—å –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è ---
if show_pollution:
    try:
        resp = requests.get(f"http://localhost:8000/cities/{city}/pollution")
        resp.raise_for_status()
        data = resp.json()

        fg_pollution = folium.FeatureGroup(name="–ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è", overlay=True, control=True)

        if show_heatmap:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
            heat_data = []
            for item in data:
                # –í–∞–≥–∞ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ AQI (—á–∏–º –Ω–∏–∂—á–µ AQI, —Ç–∏–º –≤–∏—â–µ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è)
                weight = 6 - item['aqi']  # AQI 1 (–Ω–∞–π–≥—ñ—Ä—à–µ) –æ—Ç—Ä–∏–º–∞—î –≤–∞–≥—É 5, AQI 5 (–Ω–∞–π–∫—Ä–∞—â–µ) –æ—Ç—Ä–∏–º–∞—î –≤–∞–≥—É 1
                heat_data.append([item["latitude"], item["longitude"], weight])

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
            from folium.plugins import HeatMap

            HeatMap(
                heat_data,
                min_opacity=0.9,
                max_val=5,
                radius=10,
                blur=15,
            ).add_to(fg_pollution)
        else:
            # –ó–≤–∏—á–∞–π–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏, —è–∫—â–æ —Ç–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞
            for item in data:
                if item['aqi'] == 1:
                    color = "red"
                elif item['aqi'] == 2:
                    color = "orange"
                elif item['aqi'] == 3:
                    color = "yellow"
                elif item['aqi'] == 4:
                    color = "green"
                elif item['aqi'] == 5:
                    color = "blue"
                folium.CircleMarker(
                    location=[item["latitude"], item["longitude"]],
                    radius=6,
                    color=color,
                    fill=True,
                    fill_opacity=0.6,
                    popup=f"AQI: {item['aqi']}"
                ).add_to(fg_pollution)

        fg_pollution.add_to(m)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è: {e}")

# --- –†—ñ–≤–µ–Ω—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤ ---
if show_routes:
    fg_routes = folium.FeatureGroup(name="–ú–∞—Ä—à—Ä—É—Ç–∏", overlay=True, control=True)

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ—á–æ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É ---
    if st.session_state.points:
        for i, point in enumerate(st.session_state.points):
            folium.Marker(
                location=point,
                popup=f"–¢–æ—á–∫–∞ {i + 1}",
                icon=folium.Icon(color="red" if i == 0 else "green", icon="flag")
            ).add_to(fg_routes)

    # --- –Ø–∫—â–æ —î –¥–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É, –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —ó—Ö ---
    if st.session_state.route_data:
        route_coords = st.session_state.route_data.get("route", [])
        if route_coords:
            folium.PolyLine(
                locations=route_coords,
                color="blue",
                weight=3,
                opacity=0.8
            ).add_to(fg_routes)

    fg_routes.add_to(m)

# --- –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤, —è–∫—â–æ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É ---
if mode == "üìç –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É" and output and output.get("last_clicked"):
    latlon = output["last_clicked"]
    if len(st.session_state.points) < 2:
        st.session_state.points.append((latlon["lat"], latlon["lng"]))

# --- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É ---
if mode == "üìç –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É":
    if len(st.session_state.points) > 0:
        st.write(f"–í–∏–±—Ä–∞–Ω—ñ —Ç–æ—á–∫–∏ ({len(st.session_state.points)}/2):")
        for i, point in enumerate(st.session_state.points):
            st.write(f"–¢–æ—á–∫–∞ {i + 1}: {point}")

    if len(st.session_state.points) == 2:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÅ –û–±—á–∏—Å–ª–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç"):
                try:
                    response = requests.post(
                        f"http://localhost:8000/cities/{city}/route",
                        json={
                            "start": st.session_state.points[0],
                            "end": st.session_state.points[1]
                        }
                    )
                    if response.status_code == 200:
                        st.session_state.route_data = response.json()
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
                        show_routes = True
                    else:
                        st.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É")
                except Exception as e:
                    st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        with col2:
            if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏"):
                st.session_state.points = []
                st.session_state.route_data = None

# --- –†—ñ–≤–µ–Ω—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ ---
if show_clusters:
    try:
        resp = requests.get(f"http://localhost:8000/cities/{city}/clusters")
        resp.raise_for_status()
        clusters = resp.json()

        fg_clusters = folium.FeatureGroup(name="–ö–ª–∞—Å—Ç–µ—Ä–∏", overlay=True, control=True)
        for item in clusters:
            folium.CircleMarker(
                location=[item["latitude"], item["longitude"]],
                radius=5,
                color="green",
                fill=True,
                fill_opacity=0.5,
                popup=f"–ö–ª–∞—Å—Ç–µ—Ä: {item['cluster']}"
            ).add_to(fg_clusters)
        fg_clusters.add_to(m)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: {e}")

# --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è–º–∏ ---
folium.LayerControl(collapsed=False).add_to(m)

# --- –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ ---
st_folium(m, width=700, height=500)
