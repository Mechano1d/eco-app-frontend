# streamlit_app.py

import streamlit as st
import requests
import pandas as pd
import folium
from folium.plugins import HeatMap
from streamlit_folium import st_folium
from io import BytesIO
from PIL import Image
import base64

API_URL = "http://localhost:8000"

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", layout="wide")
st.title("–ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–∞ –µ–∫–æ–ª–æ–≥—ñ—é –º—ñ—Å—Ç–∞")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó ---
# –ö—Ä–∞–π–Ω—ñ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É
if 'points' not in st.session_state:
    st.session_state.points = []

# –ü–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
if 'route_data' not in st.session_state:
    st.session_state.route_data = None

# –°—Ç–∞–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞–ø–∏ –º—ñ—Å—Ç–∞
if "initialized" not in st.session_state:
    st.session_state.initialized = False

# –ù–∞—è–≤–Ω—ñ—Å—Ç—å –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
if "collected_data" not in st.session_state:
    st.session_state.collected_data = False

# –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
if "analysis_results" not in st.session_state:
    st.session_state.analysis_results = None

city = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:", value="Kyiv")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
if st.button("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º—ñ—Å—Ç–æ"):
    res = requests.get(f"{API_URL}/cities/{city}/initialize")
    st.session_state.initialized = True
    st.write(res.json())

if st.button("–ó—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ"):
    res = requests.get(f"{API_URL}/cities/{city}/collect_data")
    st.session_state.collected_data = True
    st.write(res.json())



# --- –í–∏–±—ñ—Ä —à–∞—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
st.sidebar.header("–®–∞—Ä–∏ –∫–∞—Ä—Ç–∏")
show_pollution = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è", value=True)
show_heatmap = st.sidebar.checkbox("–¢–µ–ø–ª–æ–≤–∞ –º–∞–ø–∞", value=True)
show_routes = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç", value=False)
show_clusters = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏", value=False)
enable_routing = st.sidebar.checkbox("–†–µ–∂–∏–º –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É", value=False)

st.write(st.session_state.initialized, st.session_state.collected_data)
if st.session_state.initialized and st.session_state.collected_data:

    if st.button("–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö"):
        res = requests.get(f"{API_URL}/cities/{city}/full_analysis")
        st.session_state.analysis_results = res.json()

    if st.session_state.analysis_results:
        st.write(st.session_state.analysis_results)

    # --- –ë–∞–∑–æ–≤–∞ –º–∞–ø–∞ ---
    m = folium.Map(location=[50.45, 30.52], zoom_start=12)
    folium.LatLngPopup().add_to(m)

    # --- –ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è ---
    if show_pollution:
        try:
            resp = requests.get(f"http://localhost:8000/cities/{city}/pollution")
            resp.raise_for_status()
            data = resp.json()

            fg_pollution = folium.FeatureGroup(name="–ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è", overlay=True, control=True)

            if show_heatmap:
                heat_data = []
                for item in data:
                    weight = 6 - item['aqi']
                    heat_data.append([item["latitude"], item["longitude"], weight])
                HeatMap(
                    heat_data,
                    min_opacity=0.9,
                    max_val=5,
                    radius=10,
                    blur=15,
                ).add_to(fg_pollution)
            else:
                for item in data:
                    color = {
                        1: "red", 2: "orange", 3: "yellow", 4: "green", 5: "blue"
                    }.get(item['aqi'], "gray")
                    folium.CircleMarker(
                        location=[item["latitude"], item["longitude"]],
                        radius=6,
                        color=color,
                        fill=True,
                        fill_opacity=0.6,
                        popup=f"AQI: {item['aqi']}"
                    ).add_to(fg_pollution)

            fg_pollution.add_to(m)
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è: {e}")

    # --- –ö–ª–∞—Å—Ç–µ—Ä–∏ ---
    if show_clusters:
        try:
            resp = requests.get(f"http://localhost:8000/cities/{city}/clusters")
            resp.raise_for_status()
            clusters = resp.json()

            fg_clusters = folium.FeatureGroup(name="–ö–ª–∞—Å—Ç–µ—Ä–∏", overlay=True, control=True)
            for item in clusters:
                folium.CircleMarker(
                    location=[item["latitude"], item["longitude"]],
                    radius=5,
                    color="green",
                    fill=True,
                    fill_opacity=0.5,
                    popup=f"–ö–ª–∞—Å—Ç–µ—Ä: {item['cluster']}"
                ).add_to(fg_clusters)
            fg_clusters.add_to(m)
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: {e}")

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏ ---
    fg_routes = None
    if show_routes or enable_routing:
        fg_routes = folium.FeatureGroup(name="–ú–∞—Ä—à—Ä—É—Ç–∏", overlay=True, control=True)

        if st.session_state.points:
            for i, point in enumerate(st.session_state.points):
                folium.Marker(
                    location=point,
                    popup=f"–¢–æ—á–∫–∞ {i + 1}",
                    icon=folium.Icon(color="red" if i == 0 else "green", icon="flag")
                ).add_to(fg_routes)

        if st.session_state.route_data:
            if st.session_state.route_data:
                folium.PolyLine(
                    locations=st.session_state.route_data,
                    color="blue",
                    weight=3,
                    opacity=0.8
                ).add_to(fg_routes)

        if fg_routes:
            fg_routes.add_to(m)

    # --- –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ –º–∞–ø—ñ ---
    output = st_folium(m, width=700, height=500)

    if enable_routing and output and output.get("last_clicked"):
        latlon = output["last_clicked"]
        if len(st.session_state.points) < 2:
            st.session_state.points.append((latlon["lat"], latlon["lng"]))

    # --- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É ---
    if enable_routing:
        st.markdown("### üìç –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É")
        if len(st.session_state.points) > 0:
            st.write(f"–í–∏–±—Ä–∞–Ω—ñ —Ç–æ—á–∫–∏ ({len(st.session_state.points)}/2):")
            for i, point in enumerate(st.session_state.points):
                st.write(f"–¢–æ—á–∫–∞ {i + 1}: {point}")

        if len(st.session_state.points) == 2:
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÅ –û–±—á–∏—Å–ª–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç"):
                    try:
                        response = requests.post(
                            f"http://localhost:8000/cities/{city}/route",
                            json={
                                "start": st.session_state.points[0],
                                "end": st.session_state.points[1]
                            }
                        )
                        if response.status_code == 200:
                            st.session_state.route_data = response.json()
                        else:
                            st.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É")
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            with col2:
                if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Ç–æ—á–∫–∏"):
                    st.session_state.points = []
                    st.session_state.route_data = None

    # --- –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —à–∞—Ä—ñ–≤ ---
    folium.LayerControl(collapsed=False).add_to(m)

